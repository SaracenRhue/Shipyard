#!/bin/bash

# A function to display the help menu
function show_help() {
    echo "Shipyard (sy) - Container Management Tool"
    echo "Usage: sy [command]"
    echo "Commands:"
    echo "  install <container-name>    Install a new container"
    echo "  list                        List all installed containers"
    echo "  update <container-name>     Update specified container"
    echo "  remove <container-name>     Remove specified container"
    echo "  help                        Show this help message"
}

declare -a run_commands # Array to store Docker commands for reference

function install_container() {
    echo "Collecting Docker run commands..."

    # First loop: Collect all Docker commands interactively
    for container_config in "$@"; do
        local url="https://raw.githubusercontent.com/SaracenRhue/Shipyard/main/containers/$container_config.conf"
        # Initialize empty arrays for variable names and values
        declare -a variable_names
        declare -a variable_values

        # Use curl to fetch the configuration file content
        if curl --output /dev/null --silent --head --fail "$url"; then
            echo "Processing $container_config:"
            
            # Fetch and process the configuration content directly
            while IFS='=' read -r name value || [[ -n "$name" ]]; do
                if [[ "$name" =~ ^[[:alpha:]] ]]; then
                    name=$(echo "$name" | xargs)  # Remove potential spaces around name
                    value=$(echo "$value" | xargs)  # Remove spaces around value
                    value=${value%%#*}  # Remove inline comments

                    # Append the variable name and value to their respective arrays
                    variable_names+=("$name")
                    variable_values+=("$value")
                fi
            done < <(curl -s "$url")


            # Interact with the user to potentially modify the values
            for ((i = 1; i < ${#variable_names[@]}; i++)); do
                name="${variable_names[i]}"
                value="${variable_values[i]}"

                # Prompt user to change the value if needed
                echo "Set $name (current value: $value):"
                read -r user_input

                # If user input is not empty, update the value in the array
                if [[ -n "$user_input" ]]; then
                    variable_values[i]="$user_input"
                fi
            done

            # Store the first value in run_cmd
            run_cmd="${variable_values[0]}"
            # Replace placeholders with actual values
            for ((i = 0; i < ${#variable_names[@]}; i++)); do
                placeholder="{{${variable_names[i]}}}"
                value="${variable_values[i]}"
                # Use bash string replacement to substitute the placeholder with the actual value
                run_cmd="${run_cmd//$placeholder/$value}"
            done

            if [[ -n "$run_cmd" ]]; then   # Assuming 'docker_command' is set in the sourced config
                run_commands+=("$run_cmd") # Store the command for later execution
                echo "Command collected for $container_config"
            else
                echo "No command output detected or command skipped."
            fi
        else
            echo "Error: Container config not found for $container_script."
        fi
    done

    echo "Review run command(s):"
    for cmd in "${run_commands[@]}"; do
        echo "$cmd"
    done

    # Confirm execution
    echo "Do you want to execute all collected Docker commands? [y/n]"
    read -r execute_confirm
    if [[ "$execute_confirm" =~ ^[Yy]$ ]]; then
        # Second loop: Execute all collected commands
        echo "Executing all Docker commands..."
        for cmd in "${run_commands[@]}"; do
            echo "Executing: $cmd"
            eval "$cmd"
        done
        echo "All commands have been executed."
    else
        echo "Execution aborted by user."
    fi
}

# Function to list containers
function list_containers() {
    echo "Listing all containers"
    # Example: docker ps
}

# Function to update a container
function update_container() {
    echo "Updating container: $1"
    # Example: docker pull $1
}

# Function to remove a container
function remove_container() {
    echo "Removing container: $1"
    # Example: docker rm $1
}

# Check if no command is given
if [ $# -eq 0 ]; then
    show_help
    exit 1
fi

# Main command switch
case "$1" in
install | i)
    if [ $# -ge 2 ]; then
        install_container "${@:2}"
    else
        echo "Error: Missing container name for install."
        echo "Usage: sy install <container-name>"
    fi
    ;;
list)
    list_containers
    ;;
update)
    if [ $# -eq 2 ]; then
        update_container "$2"
    else
        echo "Error: Missing container name for update."
        echo "Usage: sy update <container-name>"
    fi
    ;;
remove)
    if [ $# -eq 2 ]; then
        remove_container "$2"
    else
        echo "Error: Missing container name for remove."
        echo "Usage: sy remove <container-name>"
    fi
    ;;
help)
    show_help
    ;;
*)
    echo "Error: Unknown command '$1'"
    show_help
    ;;
esac
