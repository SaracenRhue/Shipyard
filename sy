#!/bin/bash

# A function to display the help menu
function show_help() {
    echo "Shipyard (sy) - Container Management Tool"
    echo "Usage: sy [command]"
    echo "Commands:"
    echo "  install <container-name>    Install a new container"
    echo "  list                        List all containers you can install"
    echo "  search <keyword>            Search for containers by keyword"
    echo "  update <container-name>     Update specified container"
    echo "  update -a|--all             Update all containers"
    echo "  remove <container-name>     Remove specified container"
    echo "  log <container-name>        Display the logs of a specified container"
    echo "  ssh <container-name>        access a containers console"
    echo "  help                        Show this help message"
}

declare -a run_commands # Array to store Docker commands for reference

function install_container() {
    echo "Collecting Docker run commands..."

    # First loop: Collect all Docker commands interactively
    for container_config in "$@"; do
        local url="https://raw.githubusercontent.com/SaracenRhue/Shipyard/main/containers/$container_config.conf"
        # Initialize empty arrays for variable names and values
        declare -a variable_names=()
        declare -a variable_values=()

        # Use curl to fetch the configuration file content
        if curl --output /dev/null --silent --head --fail "$url"; then
            echo "Processing $container_config:"
            
            # Fetch and process the configuration content directly
            while IFS='=' read -r name value || [[ -n "$name" ]]; do
                if [[ "$name" =~ ^[[:alpha:]] ]]; then
                    name=$(echo "$name" | xargs)  # Remove potential spaces around name
                    value=$(echo "$value" | xargs)  # Remove spaces around value
                    value=${value%%#*}  # Remove inline comments

                    # Append the variable name and value to their respective arrays
                    variable_names+=("$name")
                    variable_values+=("$value")
                fi
            done < <(curl -s "$url")


            # Interact with the user to potentially modify the values
            for ((i = 1; i < ${#variable_names[@]}; i++)); do
                name="${variable_names[i]}"
                value="${variable_values[i]}"

                # Prompt user to change the value if needed
                echo "Set $name (current value: $value):"
                read -r user_input

                # If user input is not empty, update the value in the array
                if [[ -n "$user_input" ]]; then
                    variable_values[i]="$user_input"
                fi
            done

            # Store the first value in run_cmd
            run_cmd="${variable_values[0]}"
            # Replace placeholders with actual values
            for ((i = 0; i < ${#variable_names[@]}; i++)); do
                placeholder="{{${variable_names[i]}}}"
                value="${variable_values[i]}"
                # Use bash string replacement to substitute the placeholder with the actual value
                run_cmd="${run_cmd//$placeholder/$value}"
            done

            if [[ -n "$run_cmd" ]]; then   # Assuming 'docker_command' is set in the sourced config
                run_commands+=("$run_cmd") # Store the command for later execution
                echo "Command collected for $container_config"
            else
                echo "No command output detected or command skipped."
            fi
        else
            echo "Error: Container config not found for $container_script."
        fi
    done

    echo "Review run command(s):"
    for cmd in "${run_commands[@]}"; do
        echo "$cmd"
    done

    # Confirm execution
    echo "Do you want to execute all collected Docker commands? [y/n]"
    read -r execute_confirm
    if [[ "$execute_confirm" =~ ^[Yy]$ ]]; then
        # Second loop: Execute all collected commands
        echo "Executing all Docker commands..."
        for cmd in "${run_commands[@]}"; do
            echo "Executing: $cmd"
            eval "$cmd"
        done
        echo "All commands have been executed."
    else
        echo "Execution aborted by user."
    fi
}

# Function to list containers
function list_containers() {
    local base_url="https://api.github.com/repos/SaracenRhue/Shipyard/contents/containers"

    # Fetch the list of container configuration files from the GitHub repository
    response=$(curl -s "$base_url")

    # Check if the response is empty or not
    if [ -z "$response" ]; then
        echo "Error: Unable to fetch the list of containers."
        return 1
    fi

    # Parse and display the list of containers
    echo "Available containers for installation:"
    echo "$response" | grep '"name"' | sed -E 's/.*"name": "(.*)\.conf".*/\1/' | sort
}

function search_container() {
    local keyword=$1
    local base_url="https://api.github.com/repos/SaracenRhue/Shipyard/contents/containers"

    # Fetch the list of container configuration files from the GitHub repository
    response=$(curl -s "$base_url")

    # Check if the response is empty or not
    if [ -z "$response" ]; then
        echo "Error: Unable to fetch the list of containers."
        return 1
    fi

    # Parse and display the list of containers that match the keyword
    echo "Search results for '$keyword':"
    echo "$response" | grep '"name"' | sed -E 's/.*"name": "(.*)\.conf".*/\1/' | grep -i "$keyword" | sort

    # Check if there are any results
    if [ -z "$(echo "$response" | grep '"name"' | sed -E 's/.*"name": "(.*)\.conf".*/\1/' | grep -i "$keyword")" ]; then
        echo "No containers found matching '$keyword'."
    fi
}

# Function to update a container
function update_container() {
    local CONTAINER_NAME=$1

    # Function to update a specific Docker container
    function update_specific_container() {
        local CONTAINER_NAME=$1

        # Get the image name and tag from the existing container
        IMAGE_NAME=$(docker inspect --format='{{.Config.Image}}' "$CONTAINER_NAME")
        if [ -z "$IMAGE_NAME" ]; then
            echo "Error: Could not find container with name $CONTAINER_NAME"
            return 1
        fi

        # Pull the latest image
        echo "Pulling the latest image: $IMAGE_NAME"
        docker pull "$IMAGE_NAME"

        # Stop the running container
        echo "Stopping the container: $CONTAINER_NAME"
        docker stop "$CONTAINER_NAME"

        # Remove the old container
        echo "Removing the container: $CONTAINER_NAME"
        docker rm "$CONTAINER_NAME"

        # Start a new container with the updated image
        echo "Starting a new container: $CONTAINER_NAME with image $IMAGE_NAME"
        docker run -d --name "$CONTAINER_NAME" "$IMAGE_NAME"

        # Verify the update
        echo "Verifying the update..."
        docker ps -f "name=$CONTAINER_NAME"

        echo "Update completed for container: $CONTAINER_NAME"
    }

    # Function to update all Docker containers
    function update_all_containers() {
        # Get the list of all running containers
        CONTAINER_NAMES=$(docker ps --format '{{.Names}}')

        for CONTAINER_NAME in $CONTAINER_NAMES; do
            echo "Updating container: $CONTAINER_NAME"
            update_specific_container "$CONTAINER_NAME"
        done
    }

    # Check if the user wants to update all containers
    if [ "$CONTAINER_NAME" == "-a" ] || [ "$CONTAINER_NAME" == "--all" ]; then
        update_all_containers
    else
        update_specific_container "$CONTAINER_NAME"
    fi
}

# Function to remove a container
function remove_container() {
    echo "Removing container: $1"
    docker rm -f "$1"
}

# Function to fetch and display the logs of a specified container
function container_logs() {
    if [ -n "$1" ]; then
        docker logs "$1"
    else
        echo "Error: Missing container name."
        echo "Usage: sy logs <container-name>"
    fi
}

# Function to access the console of a specified container
function access_console() {
    if [ -n "$1" ]; then
        docker exec -it "$1" /bin/bash
        if [ $? -ne 0 ]; then
            echo "Error: Failed to start bash shell. Trying sh shell..."
            docker exec -it "$1" /bin/sh
        fi
    else
        echo "Error: Missing container name."
        echo "Usage: sy console <container-name>"
    fi
}


# Check if no command is given
if [ $# -eq 0 ]; then
    show_help
    exit 1
fi

# Main command switch
case "$1" in
install | i)
    if [ $# -ge 2 ]; then
        install_container "${@:2}"
    else
        echo "Error: Missing container name for install."
        echo "Usage: sy install <container-name>"
    fi
    ;;
list | l)
    list_containers
    ;;
search | s)
    if [ $# -eq 2 ]; then
        search_container "$2"
    else
        echo "Error: Missing keyword for search."
        echo "Usage: sy search <keyword>"
    fi
    ;;
update | u)
    if [ $# -eq 2 ]; then
        update_container "$2"
    else
        echo "Error: Missing container name for update."
        echo "Usage: sy update <container-name> or sy update -a|--all"
    fi
    ;;
remove | rm)
    if [ $# -eq 2 ]; then
        remove_container "$2"
    else
        echo "Error: Missing container name for remove."
        echo "Usage: sy remove <container-name>"
    fi
    ;;
log)
    container_logs "$2"
    ;;
console | ssh)
    access_console "$2"
    ;;
help)
    show_help
    ;;
*)
    echo "Error: Unknown command '$1'"
    show_help
    ;;
esac
